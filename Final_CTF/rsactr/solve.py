from Crypto.Util.number import *
# from pwn import *
import base64, sys, os, binascii
import struct

'''
x  90275911234609101156633792546263464228341213162679892778105695249066024946720227142477802272179352287267893975367883568847885957104332773943972758055907505082110580812985941818729069281473567879228064138006819160943020275059084144064258268069729659376773071515138219208727741109825372519582418160993395536571
nonce  90275911234609101156633792546263464228341213162679892778105695249066024946720227142477802272179352287267893975367883568847885957104332773943972758055907505082110580812985941818729069281473567879228064138006819160943020275059084144064258268069729659376773071515138219208727741109825372519582418160993395536571
d  68729502664841823901767287054655633475949028226168783318417360081036090841785916121002951599830146024953044916890846559136677319785941281447002182849937259428248516523360439926338576447207544537789692573242059241283212868587711564319933061919671699319314300494769514980215198629169567616739396722935071519307
n  103094253997262735852650930581983450213923542339253174977626040121554136262678874181504427399745219037429567375336269838705015979678911922170503274274905910085050995505109666161357186092825170494169908202063734723008128234542660784624055748957278124413207953182639639264439113965614633212723284266676091893243
y  55008397451679051257786850828507112994439773845573142097760142967707734134816741162799948999930141804975729205902887946809421767957330815201196398926007215629299566901061672633613175692216473819403491054988632317260136569781306169095394287928692564467216895947232710881608129224786151103602136032514583165479
z  55008397451679051257786850828507112994439773845573142097760142967707734134816741162799948999930141804975729205902887946809421767957330815201196398926007215629299566901061672633613175692216473819403491054988632317260136569781306169095394287928692564467216895947232710881608129224786151103602136032514583165479

'''
e = 3
n = 103094253997262735852650930581983450213923542339253174977626040121554136262678874181504427399745219037429567375336269838705015979678911922170503274274905910085050995505109666161357186092825170494169908202063734723008128234542660784624055748957278124413207953182639639264439113965614633212723284266676091893243
d = 68729502664841823901767287054655633475949028226168783318417360081036090841785916121002951599830146024953044916890846559136677319785941281447002182849937259428248516523360439926338576447207544537789692573242059241283212868587711564319933061919671699319314300494769514980215198629169567616739396722935071519307

cipher = b"NU\xa5\x9a\xfaK\xf0O\x0c\x9a\x19\x05\xd21\xb0\x9f .e\x1a=u}\x05\xbd\xbf\xcc?x\xad\x99\xf0Qt!T\xda\x04\xf7\xfa\xcc}\xc8K{\xd6\xe3\xc7\xf0\xca\x89&_\tDx\xbbB\xdd\x18\xce\xd7w\xc0Z\xda[\x82D\xae\xa2\x98.Gm8P|W\x0ev\\\x870\xf8\xe1,\xab\xfb!\xa1\xacK\xd9VX\xef\xc9\xb5Qu?c\t@\rr7\x00\x19\xeb\x7f\xed\xf4J\n\xa7\xef5\x059\xecJ\x9ah)\xfa'"
cipher_long = bytes_to_long(cipher)
nonce = pow(cipher_long, e, n)
print('nonce ', nonce)

flag_cipher = 0x00f8f68e555edd532b657135908ff2e7ee4c7709bda631003e8f639cb5c687558d9d4e46750d4484dc6eb8dd793cef9e958199fd57d0d4c3409978a742de8ca70d7fba941ea319d3593ee597d515bd4c7018aa807543efcad04ee0fe63fa6001587f4a95aec68bb1c108c8b13eacea9b24229e179822f7c3ca9bafdaaa5f0602
flag_cipher_bytes = long_to_bytes(flag_cipher)
flag_cipher_bytes += b'\x00'
print('flag_cipher_bytes ', flag_cipher_bytes, type(flag_cipher_bytes), len(flag_cipher_bytes))

block_size_bit = 128
flag_plain_bytes = b''

for i in range(0, len(flag_cipher_bytes), block_size_bit):
    x = nonce
    y = pow(x, d, n)
    # print(flag_cipher_bytes[i: i + block_size_bit])
    target = (bytes_to_long(flag_cipher_bytes[i: i + block_size_bit]) - y) % n
    print(hex(target))
    flag_plain_bytes += target.to_bytes(128, 'big')

print('dabian   ', flag_plain_bytes)